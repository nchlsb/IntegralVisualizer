{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">let width = 100;\r\nlet height = 100;\r\nlet numberString = '1 2 3 4 5';\r\nfunction sum(numbers) {\r\n    let sum = 0;\r\n    for (let number of numbers) {\r\n        sum += number;\r\n    }\r\n    return sum;\r\n}\r\nfunction sumBy(array, getNumber) {\r\n    let sum = 0;\r\n    for (let a of array) {\r\n        sum += getNumber(a);\r\n    }\r\n    return sum;\r\n}\r\nfunction area(rectangle) {\r\n    return rectangle.width * rectangle.height;\r\n}\r\nfunction allAreas(rectangles) {\r\n    return sumBy(rectangles, area);\r\n}\r\nfunction integrate(lowerBound, upperBound, rectangleWidth) {\r\n    return 0;\r\n}\r\nfunction myParseInt(string) {\r\n    const value = parseInt(string); // May give back NaN\r\n    return isNaN(value) ? { kind: 'Nothing' } : { kind: 'Just', value };\r\n}\r\nfunction justs(maybes) {\r\n    let retVal = [];\r\n    for (let maybe of maybes) {\r\n        if (maybe.kind === \"Just\") {\r\n            retVal.push(maybe.value);\r\n        }\r\n    }\r\n    return retVal;\r\n}\r\nfunction parse(stringOfSpaceSeparatedNumbers) {\r\n    return justs(stringOfSpaceSeparatedNumbers.split(' ').map(myParseInt));\r\n}\r\nlet mySum;\r\n$: mySum = sum(parse(numberString));\r\nfunction range(n) {\r\n    let retVal = [];\r\n    for (let i = 0; i < n; i++) {\r\n        retVal.push(i);\r\n    }\r\n    return retVal;\r\n}\r\n// varibles of graph \r\nlet boundQuantity = 100;\r\nlet upperBound;\r\n$: upperBound = boundQuantity;\r\nlet lowerBound;\r\n$: lowerBound = -boundQuantity;\r\nlet dx = 250;\r\nlet f;\r\n$: f = function (x) {\r\n    return (x * x) / 250;\r\n};\r\nlet domain;\r\n$: domain = (upperBound - lowerBound);\r\nlet numberOfPoints = 50;\r\n// -10 -> 5\r\n// offset => 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\r\n// lowerBound + offset\r\n// -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5\r\nlet points;\r\n$: points = [...range(numberOfPoints).map(n => {\r\n        const x = lowerBound + (n * (domain / numberOfPoints));\r\n        return { x: x, y: f(x) };\r\n    }), { x: upperBound, y: f(upperBound) }];\r\nlet numberRectangles;\r\n$: numberRectangles = (upperBound - lowerBound) / dx;\r\nlet riemannRectangles;\r\n$: riemannRectangles = range(numberRectangles).map(n => {\r\n    const x = lowerBound + (n * (upperBound - lowerBound) / numberRectangles);\r\n    const y = f(x);\r\n    return (y > 0) ? {\r\n        height: y,\r\n        width: dx,\r\n        lowerLeftCorner: { x: x, y: 0 }\r\n    }\r\n        :\r\n            {\r\n                height: -y,\r\n                width: dx,\r\n                lowerLeftCorner: { x: x, y: y }\r\n            };\r\n});\r\n</script>\r\n\r\n<main>\r\n\t<ul>\r\n\t\t<li>\r\n\t\t\tX Axis Bounds\r\n\t\t\t<input type=\"range\" min=\"50\" max=\"300\" bind:value={boundQuantity}>\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t\tRectangle Width {dx}\r\n\t\t\t<input type=\"range\" min=\"1\" max=\"100\" bind:value={dx}>\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t\tFunction\r\n\t\t\t<select bind:value={f}>\r\n\t\t\t\t<option value={x => (x * x) / 250}>Squared</option>\r\n\t\t\t\t<option value={x => Math.sin(x / 50) * 100}>Sine</option>\r\n\t\t\t</select>\r\n\t\t</li>\r\n\t</ul>\r\n\r\n\t<svg width=\"800\" height=\"800\" class=\"cartesian\" viewBox=\"{lowerBound} {lowerBound} {upperBound - lowerBound} {upperBound - lowerBound}\">\r\n\t\t<g>\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1={lowerBound} y1=\"0\" x2={upperBound} y2=\"0\" />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1=\"0\" y1={lowerBound} x2=\"0\" y2={upperBound} />\r\n\r\n\t\t\t{#each riemannRectangles as rectangle}\r\n\t\t\t\t\t<rect\r\n\t\t\t\t\t\tclass=\"riemann-rectangle\"\r\n\t\t\t\t\t\tx={rectangle.lowerLeftCorner.x}\r\n\t\t\t\t\t\ty={rectangle.lowerLeftCorner.y}\r\n\t\t\t\t\t\twidth={rectangle.width}\r\n\t\t\t\t\t\theight={rectangle.height}\r\n\t\t\t\t\t/>\r\n\t\t\t{/each}\r\n\t\t\t<polyline stroke=\"black\" fill=\"none\" points={points.map(point => `${point.x},${point.y}`).join(' ')} />\r\n\r\n\t\t</g>\r\n\t</svg>\r\n</main>\r\n\r\n<style>\r\n\tmain {\r\n\t\ttext-align: center;\r\n\t\tpadding: 1em;\r\n\t\tmax-width: 240px;\r\n\t\tmargin: 0 auto;\r\n\t}\r\n\r\n\th1 {\r\n\t\tcolor: #ff3e00;\r\n\t\ttext-transform: uppercase;\r\n\t\tfont-size: 4em;\r\n\t\tfont-weight: 100;\r\n\t}\r\n\r\n\t.riemann-rectangle {\r\n\t\tfill: gray;\r\n\t\tstroke: black;\r\n\t\tstroke-width: 1;\r\n\t}\r\n\r\n\tline {\r\n\t\tstroke-width: 1px;\r\n\t}\r\n\r\n\t@media (min-width: 640px) {\r\n\t\tmain {\r\n\t\t\tmax-width: none;\r\n\t\t}\r\n\t}\r\n\r\n\tsvg.cartesian {\r\n\t\tdisplay:flex;\r\n\t}\r\n\r\n\t/* Flip the vertical axis in <g> to emulate cartesian. */\r\n\tsvg.cartesian > g {\r\n\t\ttransform: scaleY(-1);\r\n\t}\r\n\r\n\t/* Re-flip all <text> element descendants to their original side up. */\r\n\tsvg.cartesian > g text {\r\n\t\ttransform: scaleY(-1);\r\n\t}\r\n</style>"
  ],
  "names": [],
  "mappings": "AAsIC,IAAI,0BAAC,CAAC,AACL,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC,AASD,kBAAkB,0BAAC,CAAC,AACnB,IAAI,CAAE,IAAI,CACV,MAAM,CAAE,KAAK,CACb,YAAY,CAAE,CAAC,AAChB,CAAC,AAED,IAAI,0BAAC,CAAC,AACL,YAAY,CAAE,GAAG,AAClB,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,IAAI,0BAAC,CAAC,AACL,SAAS,CAAE,IAAI,AAChB,CAAC,AACF,CAAC,AAED,GAAG,UAAU,0BAAC,CAAC,AACd,QAAQ,IAAI,AACb,CAAC,AAGD,GAAG,uBAAU,CAAG,CAAC,aAAC,CAAC,AAClB,SAAS,CAAE,OAAO,EAAE,CAAC,AACtB,CAAC"
}