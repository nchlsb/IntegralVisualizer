{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">import { pointSlope, range, slope } from \"./helpers\";\r\nimport * as katex from \"katex\";\r\nimport { each, onMount } from 'svelte/internal';\r\n// variables of graph \r\nconst DEFAULT_BOUND_MAGNITUDE = Math.ceil(Math.PI);\r\nconst GRAPH_AXIS_MARK_LENGTH = 0.08;\r\nconst xMaxBound = DEFAULT_BOUND_MAGNITUDE;\r\nconst xMinBound = -DEFAULT_BOUND_MAGNITUDE;\r\nconst yMaxBound = DEFAULT_BOUND_MAGNITUDE;\r\nconst yMinBound = -DEFAULT_BOUND_MAGNITUDE;\r\nconst DELTX_X_APPROACHES_0 = 0.000000001;\r\nlet sliderX = 0;\r\nlet x;\r\n$: x = sliderX;\r\nlet sliderDeltaX = Math.log((xMaxBound - xMinBound) / 2);\r\nlet deltaX;\r\n$: deltaX = Math.exp(sliderDeltaX) - 1;\r\nlet integralBound1 = -DEFAULT_BOUND_MAGNITUDE;\r\nlet integralBound2 = DEFAULT_BOUND_MAGNITUDE;\r\nlet integralLowerBound;\r\n$: integralLowerBound = Math.min(integralBound1, integralBound2);\r\nlet integralUpperBound;\r\n$: integralUpperBound = Math.max(integralBound1, integralBound2);\r\nlet sliderRectangleWidth = Math.log((xMaxBound - xMinBound) / 2);\r\nlet dx;\r\n$: dx = Math.exp(sliderRectangleWidth) - 1;\r\nlet f;\r\n$: f = functions[selectedIndex].implementation;\r\nlet numberOfPoints = 100;\r\nlet secantLine;\r\n$: secantLine = {\r\n    x1: xMinBound, y1: pointSlope(xMinBound, slope(x, f(x), x + deltaX, f(x + deltaX)), x, f(x)),\r\n    x2: xMaxBound, y2: pointSlope(xMaxBound, slope(x, f(x), x + deltaX, f(x + deltaX)), x, f(x))\r\n};\r\nlet tangentLine;\r\n$: tangentLine = {\r\n    x1: xMinBound, y1: pointSlope(xMinBound, slope(x, f(x), x + DELTX_X_APPROACHES_0, f(x + DELTX_X_APPROACHES_0)), x, f(x)),\r\n    x2: xMaxBound, y2: pointSlope(xMaxBound, slope(x, f(x), x + DELTX_X_APPROACHES_0, f(x + DELTX_X_APPROACHES_0)), x, f(x))\r\n};\r\n// -10 -> 5\r\n// offset => 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\r\n// lowerBound + offset\r\n// -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5\r\nlet points;\r\n$: points = [...range(numberOfPoints).map(n => {\r\n        const x = xMinBound + (n * ((xMaxBound - xMinBound) / numberOfPoints));\r\n        return { x: x, y: f(x) };\r\n    }), { x: xMaxBound, y: f(xMaxBound) }];\r\nlet numberRectangles;\r\n$: numberRectangles = (integralUpperBound - integralLowerBound) / dx;\r\nlet riemannRectangles;\r\n$: riemannRectangles = range(numberRectangles).map(n => {\r\n    const x = integralLowerBound + (n * (integralUpperBound - integralLowerBound) / numberRectangles);\r\n    const y = f(x);\r\n    // SVG can't process negative height \r\n    return {\r\n        height: Math.abs(y),\r\n        width: dx,\r\n        lowerLeftCorner: { x: x, y: (y > 0) ? 0 : y }\r\n    };\r\n});\r\nconst functions = [\r\n    { id: 'sine', implementation: (x) => Math.sin(x), representation: 'f(x) = \\\\sin(x)' },\r\n    { id: 'const', implementation: (x) => 1, representation: 'f(x) = 1' },\r\n    { id: 'linear', implementation: (x) => x, representation: 'f(x) = x' },\r\n    { id: 'quadratic', implementation: (x) => x * x, representation: 'f(x) = x^2' },\r\n    { id: 'exponential', implementation: (x) => Math.exp(x), representation: 'f(x) = e^x' },\r\n    { id: 'cubic', implementation: (x) => (x - 1) * (x) * (x + 1), representation: 'f(x) = (x - 1)(x)(x + 1)' },\r\n];\r\nonMount(() => {\r\n    // functions at the top\r\n    for (let f of functions) {\r\n        katex.render(f.representation, document.getElementById(`${f.id}`), { output: 'html' });\r\n    }\r\n    // input for location of tangent line\r\n    katex.render(\"x:\", document.getElementById(\"labelX\"), { output: 'html' });\r\n    // input for delta x\r\n    katex.render(\"\\\\Delta x:\", document.getElementById(\"labelDeltaXSymbol\"), { output: 'html' });\r\n});\r\nlet selectedIndex = 0;\r\n</script>\r\n<div class=\"outer\">\r\n<div class=\"container\">\r\n\t{#each functions as f, index}\r\n\t\t<button class={index === selectedIndex ? 'highlighted' : ''} on:click={_ => selectedIndex = index}><span id={f.id}>{f.representation}</span></button>\r\n\t{/each}\r\n\r\n\t<!-- derivatives -->\r\n\t<svg class=\"cartesian\" viewBox=\"{xMinBound} {yMinBound} {(xMaxBound - xMinBound)} {(yMaxBound - yMinBound)}\">\r\n\t\t<g>\r\n\t\t\t<!-- x and y axis -->\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1={xMinBound} y1=\"0\" x2={xMaxBound} y2=\"0\" />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1=\"1\"  y1={GRAPH_AXIS_MARK_LENGTH} x2=\"1\"  y2={-GRAPH_AXIS_MARK_LENGTH} />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1=\"2\"  y1={GRAPH_AXIS_MARK_LENGTH} x2=\"2\"  y2={-GRAPH_AXIS_MARK_LENGTH} />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1=\"3\"  y1={GRAPH_AXIS_MARK_LENGTH} x2=\"3\"  y2={-GRAPH_AXIS_MARK_LENGTH} />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1=\"4\"  y1={GRAPH_AXIS_MARK_LENGTH} x2=\"4\"  y2={-GRAPH_AXIS_MARK_LENGTH} />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1=\"-1\" y1={GRAPH_AXIS_MARK_LENGTH} x2=\"-1\" y2={-GRAPH_AXIS_MARK_LENGTH} />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1=\"-2\" y1={GRAPH_AXIS_MARK_LENGTH} x2=\"-2\" y2={-GRAPH_AXIS_MARK_LENGTH} />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1=\"-3\" y1={GRAPH_AXIS_MARK_LENGTH} x2=\"-3\" y2={-GRAPH_AXIS_MARK_LENGTH} />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1=\"-4\" y1={GRAPH_AXIS_MARK_LENGTH} x2=\"-4\" y2={-GRAPH_AXIS_MARK_LENGTH} />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1=\"0\" y1={yMinBound} x2=\"0\" y2={yMaxBound} />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1={-GRAPH_AXIS_MARK_LENGTH} y1=\"1\"  x2={GRAPH_AXIS_MARK_LENGTH} y2=\"1\" />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1={-GRAPH_AXIS_MARK_LENGTH} y1=\"2\"  x2={GRAPH_AXIS_MARK_LENGTH} y2=\"2\" />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1={-GRAPH_AXIS_MARK_LENGTH} y1=\"3\"  x2={GRAPH_AXIS_MARK_LENGTH} y2=\"3\" />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1={-GRAPH_AXIS_MARK_LENGTH} y1=\"4\"  x2={GRAPH_AXIS_MARK_LENGTH} y2=\"4\" />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1={-GRAPH_AXIS_MARK_LENGTH} y1=\"-1\" x2={GRAPH_AXIS_MARK_LENGTH} y2=\"-1\" />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1={-GRAPH_AXIS_MARK_LENGTH} y1=\"-2\" x2={GRAPH_AXIS_MARK_LENGTH} y2=\"-2\" />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1={-GRAPH_AXIS_MARK_LENGTH} y1=\"-3\" x2={GRAPH_AXIS_MARK_LENGTH} y2=\"-3\" />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1={-GRAPH_AXIS_MARK_LENGTH} y1=\"-4\" x2={GRAPH_AXIS_MARK_LENGTH} y2=\"-4\" />\r\n\r\n\t\t\t<!-- graph of function -->\r\n\t\t\t<polyline stroke=\"black\" fill=\"none\" points={points.map(point => `${point.x},${point.y}`).join(' ')} />\r\n\r\n\t\t\t<line stroke=\"black\" stroke-dasharray=\"2,2\" fill=\"none\"\r\n\t\t\t\tx1={secantLine.x1} y1={secantLine.y1}\r\n\t\t\t\tx2={secantLine.x2} y2={secantLine.y2}\r\n\t\t\t/>\r\n\t\t\t<!-- <line stroke=\"grey\" stroke-dasharray=\"2,2\" fill=\"none\"\r\n\t\t\t\tx1={tangentLine.x1} y1={tangentLine.y1}\r\n\t\t\t\tx2={tangentLine.x2} y2={tangentLine.y2}\r\n\t\t\t/> -->\r\n\r\n\t\t\t<circle cx={x} cy={f(x)} r=\".075\" fill=\"red\"></circle>\r\n\t\t\t<circle cx={x + deltaX} cy={f(x + deltaX)} r=\".075\" fill=\"red\"></circle>\r\n\r\n\t\t\t<!-- <text x={x} y={-f(x)} font-size=\".4\">Delt X</text> -->\r\n\t\t</g>\r\n\t</svg>\r\n\r\n\t<!-- todo - is there a better way to in-line this?-->\r\n\t<span>\r\n\t\tSlope of the secant: {slope(x, f(x), x + deltaX, f(x + deltaX)).toFixed(2)} | Slope of the tagent {slope(x, f(x), x + DELTX_X_APPROACHES_0, f(x + DELTX_X_APPROACHES_0)).toFixed(2)}\r\n\t</span>\r\n\t<br/>\r\n\t<span style=\"display: inline-block;\">\r\n\t\t<label id=\"labelX\" for=\"x\">x:</label>\r\n\t</span>\r\n\t<span style=\"display: inline-block;\">\r\n\t\t<label id=\"labelDeltaXValue\" for=\"deltaX\">{x.toFixed(2)}</label>\r\n\t</span>\r\n\t<input id=\"x\" type=\"range\" step=\"0.01\" min={xMinBound} max={xMaxBound} bind:value={sliderX}>\r\n\r\n\t<!-- todo - is there a better way to in-line this?-->\r\n\t<span style=\"display: inline-block;\">\r\n\t\t<label id=\"labelDeltaXSymbol\" for=\"deltaX\">Delta x:</label>\r\n\t</span>\r\n\t<span style=\"display: inline-block;\">\r\n\t\t<label id=\"labelDeltaXValue\" for=\"deltaX\">{deltaX.toFixed(2)}</label>\r\n\t</span>\r\n\t\r\n\t<input id=\"deltaX\" type=\"range\" min=\"0.001\" step=\"0.01\" max={Math.log(xMaxBound - xMinBound).toFixed(2)}  bind:value={sliderDeltaX}>\r\n\r\n\r\n\r\n\t<!-- integrals -->\r\n\r\n\t<svg class=\"cartesian\" viewBox=\"{xMinBound} {yMinBound} {(xMaxBound - xMinBound)} {(yMaxBound - yMinBound)}\">\r\n\t\t<g>\r\n\t\t\t<!-- x and y axis -->\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1={xMinBound} y1=\"0\" x2={xMaxBound} y2=\"0\" />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1=\"1\"  y1={GRAPH_AXIS_MARK_LENGTH} x2=\"1\"  y2={-GRAPH_AXIS_MARK_LENGTH} />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1=\"2\"  y1={GRAPH_AXIS_MARK_LENGTH} x2=\"2\"  y2={-GRAPH_AXIS_MARK_LENGTH} />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1=\"3\"  y1={GRAPH_AXIS_MARK_LENGTH} x2=\"3\"  y2={-GRAPH_AXIS_MARK_LENGTH} />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1=\"4\"  y1={GRAPH_AXIS_MARK_LENGTH} x2=\"4\"  y2={-GRAPH_AXIS_MARK_LENGTH} />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1=\"-1\" y1={GRAPH_AXIS_MARK_LENGTH} x2=\"-1\" y2={-GRAPH_AXIS_MARK_LENGTH} />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1=\"-2\" y1={GRAPH_AXIS_MARK_LENGTH} x2=\"-2\" y2={-GRAPH_AXIS_MARK_LENGTH} />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1=\"-3\" y1={GRAPH_AXIS_MARK_LENGTH} x2=\"-3\" y2={-GRAPH_AXIS_MARK_LENGTH} />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1=\"-4\" y1={GRAPH_AXIS_MARK_LENGTH} x2=\"-4\" y2={-GRAPH_AXIS_MARK_LENGTH} />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1=\"0\" y1={yMinBound} x2=\"0\" y2={yMaxBound} />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1={-GRAPH_AXIS_MARK_LENGTH} y1=\"1\"  x2={GRAPH_AXIS_MARK_LENGTH} y2=\"1\" />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1={-GRAPH_AXIS_MARK_LENGTH} y1=\"2\"  x2={GRAPH_AXIS_MARK_LENGTH} y2=\"2\" />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1={-GRAPH_AXIS_MARK_LENGTH} y1=\"3\"  x2={GRAPH_AXIS_MARK_LENGTH} y2=\"3\" />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1={-GRAPH_AXIS_MARK_LENGTH} y1=\"4\"  x2={GRAPH_AXIS_MARK_LENGTH} y2=\"4\" />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1={-GRAPH_AXIS_MARK_LENGTH} y1=\"-1\" x2={GRAPH_AXIS_MARK_LENGTH} y2=\"-1\" />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1={-GRAPH_AXIS_MARK_LENGTH} y1=\"-2\" x2={GRAPH_AXIS_MARK_LENGTH} y2=\"-2\" />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1={-GRAPH_AXIS_MARK_LENGTH} y1=\"-3\" x2={GRAPH_AXIS_MARK_LENGTH} y2=\"-3\" />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1={-GRAPH_AXIS_MARK_LENGTH} y1=\"-4\" x2={GRAPH_AXIS_MARK_LENGTH} y2=\"-4\" />\r\n\r\n\t\t\t<!-- bounds of intergral -->\r\n\t\t\t<line stroke=\"black\" stroke-dasharray=\"2,2\" fill=\"none\" x1={integralLowerBound} y1={yMinBound} x2={integralLowerBound} y2={yMaxBound} />\r\n\t\t\t<line stroke=\"black\" stroke-dasharray=\"2,2\" fill=\"none\" x1={integralUpperBound} y1={yMinBound} x2={integralUpperBound} y2={yMaxBound} />\r\n\r\n\t\t\t<!-- rectangles -->\r\n\t\t\t{#each riemannRectangles as rectangle}\r\n\t\t\t\t\t<rect\r\n\t\t\t\t\t\tclass=\"riemann-rectangle\"\r\n\t\t\t\t\t\tx={rectangle.lowerLeftCorner.x}\r\n\t\t\t\t\t\ty={rectangle.lowerLeftCorner.y}\r\n\t\t\t\t\t\twidth={rectangle.width}\r\n\t\t\t\t\t\theight={rectangle.height}\r\n\t\t\t\t\t/>\r\n\t\t\t{/each}\r\n\r\n\t\t\t<!-- graph of function -->\r\n\t\t\t<polyline stroke=\"black\" fill=\"none\" points={points.map(point => `${point.x},${point.y}`).join(' ')} />\r\n\t\t</g>\r\n\t</svg>\r\n\t\r\n\t<label for=\"range1\">interval bound 1</label>\r\n\t<input class=\"bound-range1\" type=\"range\" min={xMinBound} max={xMaxBound} step=\".01\" bind:value={integralBound1}>\r\n\t<label for=\"bound-range2\">interval bound 2</label>\r\n\t<input class=\"bound-range2\" type=\"range\" min={xMinBound} max={xMaxBound} step=\".01\" bind:value={integralBound2}>\r\n\r\n\t<label for=\"rectangle-width\">Rectangle Width: {(dx).toFixed(3)}</label>\r\n\t<input id=\"rectangle-width\" type=\"range\" min=\"0.01\" step=\"0.01\" max={Math.log(xMaxBound - xMinBound).toFixed(2)} bind:value={sliderRectangleWidth}>\r\n</div>\r\n</div>\r\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css\" integrity=\"sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X\" crossorigin=\"anonymous\">\r\n<style>\r\n\t.outer {\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\t.riemann-rectangle {\r\n\t\tfill: gray;\r\n\t\tstroke: black;\r\n\t\tstroke-width: 1;\r\n\t}\r\n\r\n\tline, rect, polyline {\r\n\t\tstroke-width: 1px;\r\n\t\tvector-effect: non-scaling-stroke;\r\n\t}\r\n\r\n\t@media (min-width: 640px) {\r\n\t\tmain {\r\n\t\t\tmax-width: none;\r\n\t\t}\r\n\t}\r\n\r\n\tinput[type=\"range\"], svg.cartesian {\r\n\t\twidth: min(65vh, 100%);\r\n\t\tdisplay: block;\r\n\t\tmargin: 0 auto;\r\n\t}\r\n\r\n\t.container {\r\n\t\twidth: min(70vh, 100%);\r\n\t\tdisplay: block;\r\n\t\tmargin: 0 auto;\r\n\t}\r\n\r\n\t/* Flip the vertical axis in <g> to emulate cartesian. */\r\n\tsvg.cartesian > g {\r\n\t\ttransform: scaleY(-1);\r\n\t}\r\n\r\n\t/* Re-flip all <text> element descendants to their original side up. */\r\n\tsvg.cartesian > g text {\r\n\t\ttransform: scaleY(-1);\r\n\t}\r\n\r\n\t.highlighted {\r\n\t\tbackground-color: limegreen;\r\n\t}\r\n\r\n\tlabel {\r\n\t\twidth: max-content;\r\n\t}\r\n</style>"
  ],
  "names": [],
  "mappings": "AAiNC,MAAM,4BAAC,CAAC,AACP,KAAK,CAAE,IAAI,AACZ,CAAC,AAED,kBAAkB,4BAAC,CAAC,AACnB,IAAI,CAAE,IAAI,CACV,MAAM,CAAE,KAAK,CACb,YAAY,CAAE,CAAC,AAChB,CAAC,AAED,gCAAI,CAAE,gCAAI,CAAE,QAAQ,4BAAC,CAAC,AACrB,YAAY,CAAE,GAAG,CACjB,aAAa,CAAE,kBAAkB,AAClC,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAI3B,CAAC,AAED,KAAK,CAAC,IAAI,CAAC,OAAO,6BAAC,CAAE,GAAG,UAAU,4BAAC,CAAC,AACnC,KAAK,CAAE,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,CACtB,OAAO,CAAE,KAAK,CACd,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC,AAED,UAAU,4BAAC,CAAC,AACX,KAAK,CAAE,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,CACtB,OAAO,CAAE,KAAK,CACd,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC,AAGD,GAAG,wBAAU,CAAG,CAAC,cAAC,CAAC,AAClB,SAAS,CAAE,OAAO,EAAE,CAAC,AACtB,CAAC,AAOD,YAAY,4BAAC,CAAC,AACb,gBAAgB,CAAE,SAAS,AAC5B,CAAC,AAED,KAAK,4BAAC,CAAC,AACN,KAAK,CAAE,WAAW,AACnB,CAAC"
}