{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">import { result, tex } from './expression';\r\nimport { maxBy, minBy, orElse, range, sumBy } from \"./helpers\";\r\nimport { onMount } from 'svelte';\r\n// variables of graph \r\nconst DEFAULT_BOUND_MAGNITUDE = 10;\r\nlet xMaxBound = DEFAULT_BOUND_MAGNITUDE;\r\nlet xMinBound = -DEFAULT_BOUND_MAGNITUDE;\r\nlet yMaxBound;\r\n$: yMaxBound = orElse(maxBy(points.map(point => point.y), y => y), DEFAULT_BOUND_MAGNITUDE) + 1;\r\nlet yMinBound;\r\n$: yMinBound = orElse(minBy(points.map(point => point.y), y => y), -DEFAULT_BOUND_MAGNITUDE) - 1;\r\nlet integralUpperBound = DEFAULT_BOUND_MAGNITUDE;\r\nlet integralLowerBound = -DEFAULT_BOUND_MAGNITUDE;\r\nlet dx = 1;\r\nlet f;\r\n$: f = function (x) {\r\n    return (x * x);\r\n};\r\nlet numberOfPoints = 100;\r\n// -10 -> 5\r\n// offset => 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\r\n// lowerBound + offset\r\n// -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5\r\nlet points;\r\n$: points = [...range(numberOfPoints).map(n => {\r\n        const x = xMinBound + (n * ((xMaxBound - xMinBound) / numberOfPoints));\r\n        return { x: x, y: f(x) };\r\n    }), { x: xMaxBound, y: f(xMaxBound) }];\r\nlet numberRectangles;\r\n$: numberRectangles = (integralUpperBound - integralLowerBound) / dx;\r\nlet riemannRectangles;\r\n$: riemannRectangles = range(numberRectangles).map(n => {\r\n    const x = integralLowerBound + (n * (integralUpperBound - integralLowerBound) / numberRectangles);\r\n    const y = f(x);\r\n    // SVG can't process negative height \r\n    return {\r\n        height: Math.abs(y),\r\n        width: dx,\r\n        lowerLeftCorner: { x: x, y: (y > 0) ? 0 : y }\r\n    };\r\n});\r\nlet scale = 50;\r\nonMount(() => {\r\n    let script = document.createElement('script');\r\n    script.src = \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js\";\r\n    document.head.append(script);\r\n    script.onload = () => {\r\n        MathJax = {\r\n            tex: { inlineMath: [['$', '$'], ['\\\\(', '\\\\)']] },\r\n            svg: { fontCache: 'global' }\r\n        };\r\n    };\r\n});\r\n/*\r\n    Todo list\r\n        1. (X)Change the consts at the bottom\r\n        2. (-)Bounderies should be aligned on the axes or use scroll to zoom\r\n        3. ( )Add automatically-updating LaTeX equations\r\n        4. ( )Desktop and mobile friendliness\r\n        5. ( )Negative areas and colors\r\n              Especially when the lower bound is greater than the upper bound\r\n        6. ( )Add testing\r\n              Property based test: symbolic integration and riemann sum give similar results\r\n        7. ( )Custom user equations\r\n        8. ( )Automatically determine Y upper and lower bounds via min and max f(x) value\r\n        9. ( )Dragging uppwer and lower bounds on graph\r\n        10.( ) Highlight over or under estimations as differnt color\r\n        11.( ) Math shold work out so scale varible is always 1 px\r\n*/\r\n</script>\r\n\r\n<main>\r\n\t<ul>\r\n\t\t<li>\r\n\t\t\tShould be \\[ {tex} \\]\r\n\t\t</li>\r\n\r\n\t\t<li>\r\n\t\t\tShould be 143.1407 : ..... {result}\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t\tScale {scale}\r\n\t\t\t<input class=\"bound-range\" type=\"range\" min={10} max={1000} bind:value={scale}>\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t\tRectangle Width {dx}\r\n\t\t\t<input type=\"range\" min=\"0.1\" step=\".1\" max={integralUpperBound - integralLowerBound} bind:value={dx}>\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t\tFunction\r\n\t\t\t<select bind:value={f}>\r\n\t\t\t\t<option value={x => (x * x)}>Squared</option>\r\n\t\t\t\t<option value={x => Math.sin(x)}>Sine</option>\r\n\t\t\t</select>\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t\tThe sum of the rectangles rounded to 1's place is {Math.round(sumBy(riemannRectangles, \r\n\t\t\t\trectangle => rectangle.width * rectangle.height))}\r\n\t\t</li>\r\n\t\t<li>{yMinBound} {yMaxBound}</li>\r\n\t</ul>\r\n\r\n\t<svg class=\"cartesian\" viewBox=\"{xMinBound * scale} {yMinBound * scale} {(xMaxBound - xMinBound) * scale} {(yMaxBound - yMinBound)  * scale}\">\r\n\t\t<g>\r\n\t\t\t<!-- x and y axis -->\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1={xMinBound * scale} y1=\"0\" x2={xMaxBound * scale} y2=\"0\" />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1=\"0\" y1={yMinBound * scale} x2=\"0\" y2={yMaxBound * scale} />\r\n\r\n\t\t\t<!-- bounds of intergral -->\r\n\t\t\t<line stroke=\"black\" stroke-dasharray=\"2,2\" fill=\"none\" x1={integralLowerBound * scale} y1={yMinBound * scale} x2={integralLowerBound * scale} y2={yMaxBound * scale} />\r\n\t\t\t<line stroke=\"black\" stroke-dasharray=\"2,2\" fill=\"none\" x1={integralUpperBound * scale} y1={yMinBound * scale} x2={integralUpperBound * scale} y2={yMaxBound * scale} />\r\n\r\n\t\t\t<!-- rectangles -->\r\n\t\t\t{#each riemannRectangles as rectangle}\r\n\t\t\t\t\t<rect\r\n\t\t\t\t\t\tclass=\"riemann-rectangle\"\r\n\t\t\t\t\t\tx={rectangle.lowerLeftCorner.x * scale}\r\n\t\t\t\t\t\ty={rectangle.lowerLeftCorner.y * scale}\r\n\t\t\t\t\t\twidth={rectangle.width * scale}\r\n\t\t\t\t\t\theight={rectangle.height * scale}\r\n\t\t\t\t\t/>\r\n\t\t\t{/each}\r\n\r\n\t\t\t<!-- graph of function -->\r\n\t\t\t<polyline stroke=\"black\" fill=\"none\" points={points.map(point => `${point.x * scale},${point.y * scale}`).join(' ')} />\r\n\r\n\t\t</g>\r\n\t</svg>\r\n\r\n\t<input class=\"bound-range\" type=\"range\" min={xMinBound} max={xMaxBound} bind:value={integralLowerBound}>\r\n\t<input class=\"bound-range\" type=\"range\" min={xMinBound} max={xMaxBound} bind:value={integralUpperBound}>\r\n\r\n\t<input type=\"number\" max={xMaxBound - 1} bind:value={xMinBound}>\r\n\t<input type=\"number\" min={xMinBound + 1} bind:value={xMaxBound}>\r\n</main>\r\n\r\n<style>\r\n\tmain {\r\n\t\ttext-align: center;\r\n\t\tpadding: 1em;\r\n\t\tmax-width: 240px;\r\n\t\tmargin: 0 auto;\r\n\t}\r\n\r\n\th1 {\r\n\t\tcolor: #ff3e00;\r\n\t\ttext-transform: uppercase;\r\n\t\tfont-size: 4em;\r\n\t\tfont-weight: 100;\r\n\t}\r\n\r\n\t.riemann-rectangle {\r\n\t\tfill: gray;\r\n\t\tstroke: black;\r\n\t\tstroke-width: 1;\r\n\t}\r\n\r\n\tline {\r\n\t\tstroke-width: 1px;\r\n\t}\r\n\r\n\t@media (min-width: 640px) {\r\n\t\tmain {\r\n\t\t\tmax-width: none;\r\n\t\t}\r\n\t}\r\n\r\n\t.bound-range {\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\tsvg.cartesian {\r\n\t\tdisplay: flex;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\t/* Flip the vertical axis in <g> to emulate cartesian. */\r\n\tsvg.cartesian > g {\r\n\t\twidth: 100%;\r\n\t\ttransform: scaleY(-1);\r\n\t}\r\n\r\n\t/* Re-flip all <text> element descendants to their original side up. */\r\n\tsvg.cartesian > g text {\r\n\t\ttransform: scaleY(-1);\r\n\t}\r\n</style>"
  ],
  "names": [],
  "mappings": "AAyIC,IAAI,8BAAC,CAAC,AACL,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC,AASD,kBAAkB,8BAAC,CAAC,AACnB,IAAI,CAAE,IAAI,CACV,MAAM,CAAE,KAAK,CACb,YAAY,CAAE,CAAC,AAChB,CAAC,AAED,IAAI,8BAAC,CAAC,AACL,YAAY,CAAE,GAAG,AAClB,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,IAAI,8BAAC,CAAC,AACL,SAAS,CAAE,IAAI,AAChB,CAAC,AACF,CAAC,AAED,YAAY,8BAAC,CAAC,AACb,KAAK,CAAE,IAAI,AACZ,CAAC,AAED,GAAG,UAAU,8BAAC,CAAC,AACd,OAAO,CAAE,IAAI,CACb,KAAK,CAAE,IAAI,AACZ,CAAC,AAGD,GAAG,yBAAU,CAAG,CAAC,eAAC,CAAC,AAClB,KAAK,CAAE,IAAI,CACX,SAAS,CAAE,OAAO,EAAE,CAAC,AACtB,CAAC"
}